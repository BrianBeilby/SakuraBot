/// <reference types="node" />
import type { PassThrough } from "stream";
import { AxiosRequestConfig } from "axios";
import type M3U8Stream from "m3u8stream";
import { VideoStream, VideoStreamEntity } from "./videoInfo";
export type GetFormatsEvaluator = "auto" | "eval" | "vm" | "isolated-vm" | GetFormatsCustomEvaluator;
export type GetFormatsCustomEvaluator = (code: string) => Promise<GetFormatsEvaluatorResult>;
interface GetFormatsEvaluatorResult {
    decoder: (a: string) => string;
    isDisposed: () => boolean;
    dispose: () => void;
}
export interface GetFormatsOptions {
    requestOptions?: AxiosRequestConfig;
    filterBy?: (value: VideoStreamEntity) => boolean;
    evaluator?: GetFormatsEvaluator;
}
/**
 * Generates Stream URL(s).
 *
 * Always use this to get streams before getting readable streams!
 */
export declare const getFormats: (formats: VideoStream, options?: GetFormatsOptions) => Promise<VideoStreamEntity[]>;
export interface GetReadableStreamOptions {
    requestOptions?: AxiosRequestConfig;
    m3u8streamRequestOptions?: M3U8Stream.Options["requestOptions"];
}
/**
 * Returns a YouTube stream.
 *
 * **Info:** Install "m3u8stream" using `npm install m3u8stream` for livestream support.
 */
export declare const getReadableStream: (stream: {
    url: string;
}, options?: GetReadableStreamOptions) => Promise<M3U8Stream.Stream | PassThrough>;
export {};
