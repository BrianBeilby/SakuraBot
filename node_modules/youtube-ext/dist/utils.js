"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.parseNumberOr = exports.parseQueryString = exports.contentBetweenEnds = exports.contentBetween = exports.mergeObj = exports.constants = void 0;
exports.constants = {
    urls: {
        base: "https://www.youtube.com",
        search: {
            base: (terms) => `${exports.constants.urls.base}/results?search_query=${encodeURIComponent(terms)}`,
            filters: {
                video: "&sp=EgIQAQ%253D%253D",
                channel: "&sp=EgIQAg%253D%253D",
                playlist: "&sp=EgIQAw%253D%253D",
                film: "&sp=EgIQBA%253D%253D",
                programme: "&sp=EgIQBQ%253D%253D",
            },
        },
        video: {
            base: (id) => `${exports.constants.urls.base}/watch?v=${encodeURIComponent(id)}`,
        },
        playlist: {
            base: (id) => `${exports.constants.urls.base}/playlist?list=${encodeURIComponent(id)}`,
            baseUrlRegex: /^(http|https:\/\/).*\/playlist?.*list=\w+/,
            getIdRegex: /^(http|https:\/\/).*list=(\w+)/,
            continuation: (key) => `${exports.constants.urls.base}/youtubei/v1/browse?key=${key}`,
        },
        channel: {
            base: (id) => `${exports.constants.urls.base}/channel/${id}`,
        },
    },
    headers: {
        userAgent: "Mozilla/5.0 (Windows NT 6.1; WOW64; rv:54.0) Gecko/20100101 Firefox/54.0",
    },
    err: {
        type: (key, expected, received) => `Expected "${key}" to be "${expected}" but received "${received}".`,
    },
};
const mergeObj = (one, two) => {
    for (const key in two) {
        if (Object.prototype.hasOwnProperty.call(two, key)) {
            const ele = two[key];
            if (typeof ele === "object")
                one[key] = (0, exports.mergeObj)(one[key], ele);
            else
                one[key] = ele;
        }
    }
    return one;
};
exports.mergeObj = mergeObj;
const contentBetween = (data, start, end) => {
    return data.split(start, 2)[1].split(end, 1)[0];
};
exports.contentBetween = contentBetween;
const contentBetweenEnds = (data, start, ends) => {
    const first = data.split(start, 2)[1];
    for (const [x, y] of ends) {
        const second = first.split(x, 1)[0];
        if (second.length !== first.length) {
            return second + y;
        }
    }
    // should i return first?
    return first;
};
exports.contentBetweenEnds = contentBetweenEnds;
const parseQueryString = (data) => {
    const params = {};
    data.split("&").forEach((x) => {
        const [k, v] = x.split("=");
        params[k] = decodeURIComponent(v);
    });
    return params;
};
exports.parseQueryString = parseQueryString;
const parseNumberOr = (data, def) => {
    if (typeof data === "string") {
        return parseInt(data);
    }
    return def;
};
exports.parseNumberOr = parseNumberOr;
