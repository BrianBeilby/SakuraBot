"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getReadableStream = exports.getFormats = void 0;
const axios_1 = __importDefault(require("axios"));
const utils_1 = require("./utils");
/**
 * Generates Stream URL(s).
 *
 * Always use this to get streams before getting readable streams!
 */
const getFormats = (formats, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _a, _b, _c, _d, _e, _f, _g, _h;
    if (typeof formats !== "object") {
        throw new Error(utils_1.constants.err.type("formats", "object", typeof formats));
    }
    if (typeof options !== "object") {
        throw new Error(utils_1.constants.err.type("options", "object", typeof options));
    }
    options = (0, utils_1.mergeObj)({
        requestOptions: {
            headers: {
                "User-Agent": utils_1.constants.headers.userAgent,
            },
        },
    }, options);
    const streams = [];
    let directStreams = [
        ...(formats.formats || []),
        ...(formats.adaptiveFormats || []),
    ].sort((a, b) => (a.bitrate ? +a.bitrate : 0) -
        (b.bitrate ? +b.bitrate : 0) +
        (a.audioSampleRate ? parseInt(a.audioSampleRate) : 0) -
        (b.audioSampleRate ? parseInt(b.audioSampleRate) : 0));
    if (typeof options.filterBy === "function") {
        directStreams = directStreams.filter(options.filterBy);
    }
    let decipher;
    try {
        for (const stream of directStreams) {
            if (!((_b = (_a = options.filterBy) === null || _a === void 0 ? void 0 : _a.call(options, stream)) !== null && _b !== void 0 ? _b : true)) {
                continue;
            }
            if (((_c = formats.player) === null || _c === void 0 ? void 0 : _c.url) && stream.signatureCipher) {
                decipher !== null && decipher !== void 0 ? decipher : (decipher = yield getCipherFunction(formats.player.url, {
                    requestOptions: options.requestOptions,
                }));
                const cipherData = (0, utils_1.parseQueryString)(stream.signatureCipher);
                stream.url = `${cipherData.url}&${cipherData.sp}=${decipher.decoder(cipherData.s)}`;
                stream.__processed = true;
            }
            // not really sure about this.
            if ((_d = stream.url) === null || _d === void 0 ? void 0 : _d.startsWith("https://")) {
                stream.__processed = true;
            }
            stream.isLive = isLiveContentURL(stream.url);
            streams.push(stream);
        }
        decipher === null || decipher === void 0 ? void 0 : decipher.dispose();
    }
    catch (err) {
        if (decipher && !decipher.isDisposed()) {
            decipher.dispose();
        }
        throw err;
    }
    if (formats.hlsManifestUrl) {
        const { data: hlsData } = yield axios_1.default.get(formats.hlsManifestUrl, Object.assign(Object.assign({}, options.requestOptions), { responseType: "text" }));
        const hlsStreams = hlsData.matchAll(/#EXT-X-STREAM-INF:([^\n]*)\n([^\n]+)/g);
        for (const x of hlsStreams) {
            const [, tagsRaw, url] = x;
            if (!url)
                continue;
            const tags = {};
            if (tagsRaw) {
                for (const x of tagsRaw.matchAll(/(\w+)=([^,\n]+)/g)) {
                    const [, k, v] = x;
                    if (k && v) {
                        tags[k] = v;
                    }
                }
            }
            const codecs = tags["CODECS"];
            const resolution = (_f = (_e = tags["RESOLUTION"]) === null || _e === void 0 ? void 0 : _e.split("x")) !== null && _f !== void 0 ? _f : [];
            streams.push({
                itag: (0, utils_1.parseNumberOr)((_g = url.match(/itag\/(\d+)\//)) === null || _g === void 0 ? void 0 : _g[1], 0),
                url,
                mimeType: codecs ? `codes=${codecs[1]}` : "",
                contentLength: (_h = tags["BANDWIDTH"]) !== null && _h !== void 0 ? _h : "0",
                fps: (0, utils_1.parseNumberOr)(tags["RATE"], 0),
                height: (0, utils_1.parseNumberOr)(resolution[1], 0),
                width: (0, utils_1.parseNumberOr)(resolution[0], 0),
                isLive: isLiveContentURL(url),
                __processed: true,
            });
        }
    }
    return streams;
});
exports.getFormats = getFormats;
/**
 * Returns a YouTube stream.
 *
 * **Info:** Install "m3u8stream" using `npm install m3u8stream` for livestream support.
 */
const getReadableStream = (stream, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    if (typeof stream !== "object") {
        throw new Error(utils_1.constants.err.type("streams", "object", typeof stream));
    }
    if (typeof options !== "object") {
        throw new Error(utils_1.constants.err.type("options", "object", typeof options));
    }
    options = (0, utils_1.mergeObj)({
        requestOptions: {
            headers: {
                "User-Agent": utils_1.constants.headers.userAgent,
            },
        },
    }, options);
    if (isDashContentURL(stream.url) || isHlsContentURL(stream.url)) {
        const m3u8stream = requireOrThrow("m3u8stream");
        return m3u8stream(stream.url, {
            requestOptions: options.m3u8streamRequestOptions,
        });
    }
    const resp = yield axios_1.default.get(stream.url, Object.assign(Object.assign({}, options.requestOptions), { responseType: "stream" }));
    return resp.data;
});
exports.getReadableStream = getReadableStream;
const isLiveContentURL = (url) => url === null || url === void 0 ? void 0 : url.includes("/yt_live_broadcast/");
const isDashContentURL = (url) => url === null || url === void 0 ? void 0 : url.includes("/dash/");
const isHlsContentURL = (url) => url === null || url === void 0 ? void 0 : url.includes("/hls_playlist/");
const getCipherFunction = (url, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    const { data } = yield axios_1.default.get(url, options.requestOptions);
    const aFuncStart = 'a=a.split("")';
    const aFuncEnd = "};";
    const aFuncBody = (0, utils_1.contentBetween)(data, aFuncStart, aFuncEnd);
    const aFunc = "(a) => {" + aFuncStart + aFuncBody + aFuncEnd;
    const bVar = (0, utils_1.contentBetween)(aFuncBody, ";", ".");
    const bVarStart = `var ${bVar}=`;
    const bVarEnd = "}};";
    const bFuncBody = (0, utils_1.contentBetween)(data, bVarStart, bVarEnd);
    const bFunc = bVarStart + bFuncBody + bVarEnd;
    const decoderCode = aFunc + "\n" + bFunc;
    let evaluator;
    if (typeof options.evaluator === "function") {
        evaluator = options.evaluator;
    }
    else if (typeof options.evaluator === "string" &&
        options.evaluator !== "auto") {
        switch (options.evaluator) {
            case "isolated-vm":
                evaluator = evalInIsolatedVM;
                break;
            case "vm":
                evaluator = evalInNodeVM;
                break;
            case "eval":
                evaluator = evalInEval;
                break;
        }
    }
    else {
        if (isModuleInstalled("isolated-vm")) {
            evaluator = evalInIsolatedVM;
        }
        else if (isModuleInstalled("vm")) {
            evaluator = evalInNodeVM;
        }
        else {
            evaluator = evalInEval;
        }
    }
    const result = yield evaluator(decoderCode);
    return result;
});
const evalInEval = (code) => __awaiter(void 0, void 0, void 0, function* () {
    return {
        decoder: eval(code),
        isDisposed: () => true,
        dispose: () => { },
    };
});
const requireOrThrow = (moduleName) => {
    try {
        const module = require(moduleName);
        return module;
    }
    catch (_) {
        throw new Error(`Couldn't access "${moduleName}". Did you install it?`);
    }
};
const isModuleInstalled = (moduleName) => {
    try {
        require(moduleName);
        return true;
    }
    catch (_) {
        return false;
    }
};
const evalInNodeVM = (code) => __awaiter(void 0, void 0, void 0, function* () {
    const vm = requireOrThrow("vm");
    return {
        decoder: vm.runInNewContext(code),
        isDisposed: () => true,
        dispose: () => { },
    };
});
const evalInIsolatedVM = (code, options = {}) => __awaiter(void 0, void 0, void 0, function* () {
    var _j;
    const ivm = requireOrThrow("isolated-vm");
    const isolate = new ivm.Isolate({ memoryLimit: (_j = options === null || options === void 0 ? void 0 : options.memoryLimit) !== null && _j !== void 0 ? _j : 8 });
    const context = isolate.createContextSync();
    return {
        decoder: yield context.eval(code),
        isDisposed: () => isolate.isDisposed,
        dispose: () => {
            if (isolate.isDisposed)
                return;
            isolate.dispose();
        },
    };
});
